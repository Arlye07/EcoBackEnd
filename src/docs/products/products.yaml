openapi: "3.0.1"
info:
  title: API Products
  version: "1.0"
paths:
  /api/dbProducts:
    get:
      summary: Obtiene una lista de todos los productos disponibles segun los fiiltros del usuario.
      tags:
        - Products
      responses:
        "200":
          description: Productos obtenidos con exito.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
  '/':
    get:
      summary: Obtiene una lista de productos.
      tags:
        - Products
      security:
        - privateAccess: []
      parameters:
        - name: limit
          in: query
          description: Número máximo de productos a devolver. Valor predeterminado; 10.
          schema:
            type: integer
            minimum: 1
        - name: page
          in: query
          description: Número de página para la paginación. Valor predeterminado; 1.
          schema:
          type: integer
          minimum: 1
        - name: sort
          in: query
          description: Orden de clasificación de los productos. Valores permitidos; 'asc' (ascendente), 'desc' (descendente).
          schema:
            type: string
            enum: ['asc', 'desc']
        - name: query
          in: query
          description: Búsqueda por nombre o descripción de producto.
          schema:
            type: string
      responses:
        '200':
          description: Lista de productos obtenida con éxito.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        '500':
          description: Error interno del servidor.
    post:
      summary: Crea un nuevo producto.
      tags:
          - Products
      security:
        - adminAccess: []
      requestBody:
        description: Información del producto a crear.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addProductDb'
      responses:
        '200':
          description: Producto creado con éxito.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '500':
          description: Error interno del servidor.

  '/:productId':
    put:
      summary: Actualiza un producto existente.
      tags:
        - Products
      security:
        - adminAccess: []
      parameters:
        - name: productId
          in: path
          description: ID del producto a actualizar.
          required: true
          schema:
            type: string
      requestBody:
        description: Datos del producto a actualizar.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Producto actualizado con éxito.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '500':
          description: Error interno del servidor.


    delete:
      summary: Elimina un producto existente.
      tags:
        - Products
      security:
        - adminAccess: []
      parameters:
        - name: productId
          in: path
          description: ID del producto a eliminar.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Producto eliminado con éxito.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '500':
          description: Error interno del servidor.

  '/mockingProducts':
    get:
      summary: Obtiene productos ficticios.
      tags:
        - Products
      security:
        - userAccess: []
      responses:
        '200':
          description: Productos ficticios obtenidos con éxito.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '500':
          description: Error interno del servidor.








components:
  schemas:
    Product:
      type: object
      properties:
        _id:
          type: string
          description: id de mongo
        name:
          type: string
          description: nombre del producto
        description:
          type: string
          description: descripcion del producto
        price:
          type: number
          description: precio base del producto
        stock:
          type: number
          description: cantidad de unidades disponibles del producto
        code:
          type: string
          description: codigo general del producto
        category:
          type: string
          description: categoria a la cual pertenece el producto
        status:
          type: boolean
          description: estado de disponibilidad del producto
        img:
          type: string
          description: url de la imagen descriptiva del producto
        owner:
          type: string
          description: rol del usuario que creo el producto
    requestBodies:
    addProductDb:
      description: Body con la informacion necesaria para crear un nuevo producto con exito.
      properties:
        name:
          type: string
          description: nombre del producto.
        description:
          type: string
          description: descripcion del producto
        price:
          type: number
          description: precio base del producto
        stock:
          type: number
          description: cantidad de unidades disponibles del producto
        code:
          type: string
          description: codigo general del producto
        category:
          type: string
          description: categoria a la cual pertenece el producto
        status:
          type: boolean
          description: estado de disponibilidad del producto
        img:
          type: string
          description: url de la imagen descriptiva del producto
        owner:
          type: string
          description: rol del usuario que creo el producto
      example:
        name: Pan
        description: Alimento a base de harina de trigo con leudante y sal.
        price: 1.00
        stock: 99
        code: 
        category: comida
        status: true
        owner: "ID del propietario del producto"
    updateProduct:
      description: Body con la informacion necesaria para actualizar las propiedadesde un producto.
      properties:
        name:
          type: string
          description: nombre del producto.
        description:
          type: string
          description: descripcion del producto
        price:
          type: number
          description: precio base del producto
        stock:
          type: number
          description: cantidad de unidades disponibles del producto
        code:
          type: string
          description: codigo general del producto
        category:
          type: string
          description: categoria a la cual pertenece el producto
        status:
          type: boolean
          description: estado de disponibilidad del producto
        img:
          type: string
          description: url de la imagen descriptiva del producto
      example:
        price: 50
        